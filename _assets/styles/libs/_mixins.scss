
/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
@mixin fa($content: false) {
  text-decoration: none;
  &::before {
    @if $content {
      content: $content;
    }
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-family: 'Font Awesome 5 Solid';
    font-style: normal;
    font-weight: normal;
    text-transform: none !important;
  }
}

@mixin icon($content: false) {
  text-decoration: none;
  &::before {
    @if $content {
      content: $content;
    }
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-family: 'IconFont';
    font-style: normal;
    font-weight: normal;
    text-transform: none !important;
  }
}

@mixin transition-all() {
  -webkit-transition: all 350ms;
  -moz-transition: all 350ms;
  transition: all 350ms;
}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {
  @if $important {
    $important: '!important';
  }
  padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max(0.1em, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};
}

@mixin media-query($device) {
  @media screen and (max-width: $device) {
    @content;
  }
}

@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: rgba(#000, 0.55) ) {
  -webkit-box-shadow: $h $v $b $s $c;
  -moz-box-shadow: $h $v $b $s $c;
  box-shadow: $h $v $b $s $c;
}

@mixin respond-to($breakpoint) {
  @media only screen and (max-width: $breakpoint + px) {
    @content;
  }
}

@mixin font-size($size: 1.6) {
  font-size: ($size * 10) + px;
  font-size: $size + rem;
}

@mixin box-shadow( $h: 10px , $v: 10px , $b: 0px , $s: 0px , $c: rgba(#000, 0.55) ) {
  -webkit-box-shadow: $h $v $b $s $c;
  -moz-box-shadow: $h $v $b $s $c;
  box-shadow: $h $v $b $s $c;
}

// Accomodate older versions of IE
@mixin opacity($opacity, $is_imp: false) {
  @if $is_imp == false {
    opacity: $opacity;
    filter: alpha(opacity=($opacity * 100));
  } @else {
    opacity: $opacity !important;
    filter: alpha(opacity=($opacity * 100));
  }
}

@mixin clip-path($clip) {
  -webkit-clip-path: $clip;
  -moz-clip-path: $clip;
  -ms-clip-path: $clip;
  clip-path: $clip;
}

@mixin calc($prop, $exp) {
  #{$prop}: -moz-calc(#{$exp});
  #{$prop}: -webkit-calc(#{$exp});
  #{$prop}: calc(#{$exp});
}

@mixin prefix-gradient($pos, $important, $steps...) {
  $dir: "";
  $to-dir: "";
  @if $pos == "top" or $pos == "to bottom" {
    // top to bottom
    $dir: top;
    $to-dir: to bottom;
  } @else if $pos == "bottom" or $pos == "to top" {
    // top to bottom
    $dir: bottom;
    $to-dir: to top;
  } @else if $pos == "right" or $pos == "to left" {
    // right to left
    $dir: right;
    $to-dir: to left;
  } @else if $pos == "left" or $pos == "to right" {
    // left to right
    $dir: left;
    $to-dir: to right;
  }
  @if $important {
    $important: !important;
  }
  background: -webkit-linear-gradient($dir, $steps) $important;
  background: -moz-linear-gradient($dir, $steps) $important;
  background: -o-linear-gradient($dir, $steps) $important;
  background: linear-gradient($to-dir, $steps) $important;
}

@mixin ease-linear-gradient($pos, $color, $start:0%, $important: null) {
  $rng: 100 - $start;
  @include prefix-gradient($pos, $important,
    rgba($color, 1) $start,
    rgba($color, 0.738) $start + $rng * 0.19,
    rgba($color, 0.541) $start + $rng * 0.34,
    rgba($color, 0.382) $start + $rng * 0.47,
    rgba($color, 0.278) $start + $rng * 0.565,
    rgba($color, 0.194) $start + $rng * 0.65,
    rgba($color, 0.126) $start + $rng * 0.73,
    rgba($color, 0.075) $start + $rng * 0.802,
    rgba($color, 0.042) $start + $rng * 0.861,
    rgba($color, 0.021) $start + $rng * 0.91,
    rgba($color, 0.008) $start + $rng * 0.952,
    rgba($color, 0.002) $start + $rng * 0.982,
    rgba($color, 0) $start + $rng);
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';
  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};
    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin linear-gradient($pos, $g1, $g2: null, $g3: null, $g4: null, $g5: null, $g6: null, $g7: null, $g8: null, $g9: null, $g10: null, $g11: null, $g12: null, $g13: null, $g14: null,  $fallback: null) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;
  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $g14: $g13; $g13: $g12; $g11: $g10; $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
    $pos: null;
  }
  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }
  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10, $g11, $g12, $g13, $g14;
  // Set $g1 as the default fallback color
  $fallback-color: nth($g1, 1);
  // If $fallback is a color use that color as the fallback color
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }
  background-color: $fallback-color;
  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
  background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}
